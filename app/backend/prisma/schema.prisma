// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Machine {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(50)
  plantId Int    @map("plant_id")

  collectors CollectorMachine[]
  plant      Plant              @relation(fields: [plantId], references: [id])
  variables  Variable[]
  errors     WorkerErrorLog[]
  Data       Data[]

  @@map("mpa_machine")
}

model Worker {
  id            Int @id @default(autoincrement())
  configVersion Int @default(1) @map("config_version")
  plantId       Int @map("plant_id")
  workerMac     String @db.VarChar(17) @map("worker_mac")

  auth       WorkerAuth[]
  collectors Collector[]
  errorLogs  WorkerErrorLog[]
  plant      Plant            @relation(fields: [plantId], references: [id])
  
  @@unique([workerMac])
  @@map("isystem_worker")
}

enum CollectorDriver {
  SIEMENS
  ROCKWELL
  MODBUS
  OPC
  IOT

  @@map("isystem_collector_type")
}

enum CollectorModel {
  S7300
  S7400
  S71200
  S71500
  CompactLogix5300
  ControlLogix5500
  MicroLogix1400
  Schneider
  Client
  Mitsubishi

  @@map("isystem_collector_model")
}


model Collector {
  id             Int             @id @default(autoincrement())
  workerId       Int             @map("worker_id")
  address        String?         @db.VarChar(32)
  port           String?         @db.VarChar(8)
  user           String?         @db.VarChar(32)
  password       String?         @db.VarChar(64)
  timeoutMs      Int             @default(5000) @map("timeout_ms")
  connectionType String?         @map("connection_type") @db.VarChar(32)
  rack           Int?
  slot           Int?
  observation    String?         @db.VarChar(256)
  certificate    String?
  model          CollectorModel
  driver         CollectorDriver

  machines  CollectorMachine[]
  variables Variable[]
  errors    WorkerErrorLog[]
  Data      Data[]
  worker    Worker             @relation(fields: [workerId], references: [id])

  @@map("isystem_collector")
}

enum CertificatePermission {
  Partial
  Full
  Admin

  @@map("isystem_worker_auth_cert_perm")
}

enum CertificateStatus {
  Inactive
  Active
  Waiting

  @@map("isystem_worker_auth_cert_status")
}

model WorkerAuth {
  id               Int      @id @default(autoincrement())
  workerId         Int      @map("worker_id")
  certSerialNumber String   @db.VarChar(128) @map("cert_serial_number")
  status           CertificateStatus
  permission       CertificatePermission

  certificate Certificate @relation(fields: [certSerialNumber], references: [serialNumber])

  @@map("isystem_worker_auth")
  Worker Worker[]
}

model Certificate {
  serialNumber        String @id @db.VarChar(128) @map("serial_number")
  privateKey          String @db.Text @map("private_key")
  pem                 String @db.Text
  expirationTimestamp DateTime @db.Timestamptz(6) @map("expiration_timestamp")

  @@map("isystem_worker_auth_certificate")
  WorkerAuth WorkerAuth[]
}

model WorkerErrorLog {
  id          Int      @id @default(autoincrement())
  workerId    Int      @map("worker_id")
  machineId   Int?     @map("machine_id")
  collectorId Int?     @map("collector_id")
  code        String   @db.VarChar(50)
  severity    String   @db.VarChar(50)
  message     String   @db.Text
  trace       String?  @db.Text
  timestamp   DateTime @db.Timestamptz(6)

  worker    Worker     @relation(fields: [workerId], references: [id])
  machine   Machine?   @relation(fields: [machineId], references: [id])
  collector Collector? @relation(fields: [collectorId], references: [id])

  @@map("isystem_worker_error_log")
}

enum VariableAccessLevel {
  READ
  WRITE
  READ_WRITE

  @@map("isystem_variable_access_level")
}

enum VariableDataType {
  Float
  Int16
  Int32
  UInt16
  UInt32
  Double
  String
  Boolean
  Byte
  Word
  Dword
  Int8
  Int64
  UInt8
  UInt64
  DateTime
  DInt

  @@map("isystem_variable_data_type")
}

model Variable {
  id            Int     @id @default(autoincrement())
  collectorId   Int     @map("collector_id")
  machineId     Int     @map("machine_id")
  name          String  @db.VarChar(64)
  address       String? @db.VarChar(32)
  deadbandRange Float   @map("deadband_range")
  monitoring    Boolean @default(true)
  updateRateMs  Int     @default(500) @map("update_rate_ms")

  dataType    VariableDataType    @map("data_type")
  accessLevel VariableAccessLevel @default(READ) @map("access_level")

  collector Collector @relation(fields: [collectorId], references: [id])
  machine   Machine   @relation(fields: [machineId], references: [id])

  @@map("isystem_variable")
}

model CollectorMachine {
  collectorId Int @map("collector_id")
  machineId   Int @map("machine_id")

  collector Collector @relation(fields: [collectorId], references: [id])
  machine   Machine   @relation(fields: [machineId], references: [id])

  @@id([collectorId, machineId])
  @@map("isystem_collector_machine")
}

model Plant {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  machines Machine[]
  workers  Worker[]

  @@map("mpa_plant")
}

model Data {
  id          Int @id @default(autoincrement())
  variable    String @db.VarChar(64) 
  value       String @db.VarChar(64)
  timestamp   DateTime @db.Timestamptz(6)
  collectorId Int @map("collector_id")
  machineId   Int @map("machine_id")

  collector Collector @relation(fields: [collectorId], references: [id])
  machine   Machine   @relation(fields: [machineId], references: [id])

  @@map ("isystem_data")
}