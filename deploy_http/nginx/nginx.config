# No nginx, o bloco 'events' serve para configurar como o nginx administrará as conexões
# nesse exemplo usaremos o default, logo esse bloco pode ficar vazio.
events {}

# Dentro do bloco 'http', logicamente, entram diretivas para administração desse tipo de conexão.
http {

    # Blocos 'upstream' definem grupos de balanceamento. E dentro desse bloco definimos com 'server'
    # cada hostname e porta pertencente ao grupo. Dessa forma, o nginx consegue organizar o proxy desses
    # servidores.
    upstream app_exemplo_1 {
        server app_exemplo_1:8000;  # Hostname deve referenciar o nome do container e porta. Lembrando
				    # que esse hostname e porta são na rede interna do servidor e não 
				    # tem a ver com as portas que liberamos na criação da instância EC2.
    }

    upstream app_exemplo_2 {
        server app_exemplo_2:8080;  # Mesma coisa aqui.
    }
	
    # Já no bloco 'server' temos a definição do servidor que recebe todas as requisições HTTP na porta 80.
    # Com 'listen' falamos para o nginx escutar essa porta.
    server {
        listen 80;
	
	# Os blocos 'location' por sua vez servem como vias para direcionar as requisições que vão
	# chegando no servidor. 
        location /app_exemplo_1/ {
	    # 'rewrite' serve para mudar a URL da requisição antes de passá-la para upstream.
	    # Aqui o regex aplicado serve para capturar apenas o que vier depois de 'app_exemplo_1'.
	    rewrite ^/app_exemplo_1(/.*)?$ /$1 break;
            
	    # Com essa diretiva definimos para qual upstream a requisição será repassada.
	    proxy_pass http://app_exemplo_1/;

	    # Passar para frente o hostname usado pelo client na requisição.
	    # Importante caso o backend referenciado nesse location precise dessa informação
	    # que à princípio, é perdida pois o proxy muda o hostname no momento em que
	    # passa para o upstream. 
	    # Client pediu: http://hostname.com/app_exemplo_1/abcd -> (viraria) http://app_exemplo_1:8000/abcd
            proxy_set_header Host $host;
	    
	    # Passar para frente o IP real do client que fez a requisição.
	    # Importante para questões de segurança e controle de trafego. 
            proxy_set_header X-Real-IP $remote_addr;
        }

	# Mesma coisa do anterior.
        location /app_exemplo_2/ {
            rewrite ^/app_exemplo_2(/.*)?$ /$1 break;
	    proxy_pass http://app_exemplo_2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
